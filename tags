!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!CMake	D,option	/options specified with -D/
!_TAG_KIND_DESCRIPTION!CMake	f,function	/functions/
!_TAG_KIND_DESCRIPTION!CMake	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!CMake	p,project	/projects/
!_TAG_KIND_DESCRIPTION!CMake	t,target	/targets/
!_TAG_KIND_DESCRIPTION!CMake	v,variable	/variable definitions/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	1.1	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PARSER_VERSION!CMake	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/i3riced/programming/c/dungeon_game/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/v6.1.0/
!_TAG_ROLE_DESCRIPTION!C!function	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C!struct	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
CMAKE_BUILD_TYPE	CMakeLists.txt	/^set(CMAKE_BUILD_TYPE Debug)$/;"	v
Cyan	text.c	/^SDL_Color Cyan = {255, 0, 255};$/;"	v	typeref:typename:SDL_Color
FONT_NAME	text.h	/^#define FONT_NAME /;"	d
GAME_WINDOW	window.h	/^#define GAME_WINDOW /;"	d
Gray	text.c	/^SDL_Color Gray = {200, 200, 200};$/;"	v	typeref:typename:SDL_Color
PANEL_WINDOW	window.h	/^#define PANEL_WINDOW /;"	d
P_SIZE	main.c	/^#define P_SIZE /;"	d	file:
Red	text.c	/^SDL_Color Red = {255, 0, 0};$/;"	v	typeref:typename:SDL_Color
STATUS_LINE	window.h	/^#define STATUS_LINE /;"	d
TEXT_H	text.h	/^#define TEXT_H$/;"	d
TXT_MAX	main.c	/^    TXT_MAX$/;"	e	enum:textures	file:
TXT_PLAYER_L	main.c	/^    TXT_PLAYER_L,$/;"	e	enum:textures	file:
TXT_PLAYER_R	main.c	/^    TXT_PLAYER_R,$/;"	e	enum:textures	file:
TXT_SELECT	main.c	/^    TXT_SELECT,$/;"	e	enum:textures	file:
TXT_ZOMBIE	main.c	/^    TXT_ZOMBIE,$/;"	e	enum:textures	file:
WINDOW_H	window.h	/^#define WINDOW_H$/;"	d
WINDOW_HEIGHT	window.h	/^#define WINDOW_HEIGHT /;"	d
WINDOW_INFO_SIZE	window.h	/^#define WINDOW_INFO_SIZE /;"	d
WINDOW_WIDTH	window.h	/^#define WINDOW_WIDTH /;"	d
White	text.c	/^SDL_Color White = {255, 255, 255};$/;"	v	typeref:typename:SDL_Color
Yellow	text.c	/^SDL_Color Yellow = {255, 255, 0};$/;"	v	typeref:typename:SDL_Color
__anon0d38083b0108	main.c	/^{$/;"	s	file:
ammo	main.c	/^    int ammo;$/;"	m	struct:__anon0d38083b0108	typeref:typename:int	file:
clear_window	window.c	/^void clear_window()$/;"	f	typeref:typename:void
color	window.c	/^unsigned int color(int r, int g, int b, int a) {$/;"	f	typeref:typename:unsigned int
counter	main.c	/^    int counter;$/;"	m	struct:zombie	typeref:typename:int	file:
draw	main.c	/^void draw()$/;"	f	typeref:typename:void
draw_rectangle	window.c	/^void draw_rectangle(int x,int y,int w,int h, SDL_Color c0, SDL_Color c1, SDL_Color c2, SDL_Color/;"	f	typeref:typename:void
dungeon_game	CMakeLists.txt	/^add_executable(dungeon_game window.c text.c main.c)$/;"	t
dungeon_game	CMakeLists.txt	/^project(dungeon_game)$/;"	p
font	text.c	/^TTF_Font* font;$/;"	v	typeref:typename:TTF_Font *
game_logic	main.c	/^void game_logic()$/;"	f	typeref:typename:void
get_time_usec	window.c	/^unsigned long get_time_usec()$/;"	f	typeref:typename:unsigned long
going_right	main.c	/^    int going_right;$/;"	m	struct:__anon0d38083b0108	typeref:typename:int	file:
handle_key	main.c	/^void handle_key(int key)$/;"	f	typeref:typename:void
hp	main.c	/^    int hp;$/;"	m	struct:__anon0d38083b0108	typeref:typename:int	file:
init_sdl	window.c	/^int  init_sdl()$/;"	f	typeref:typename:int
load_font	text.c	/^int load_font()$/;"	f	typeref:typename:int
load_texture	window.c	/^SDL_Texture* load_texture(const char * texture_name)$/;"	f	typeref:typename:SDL_Texture *
load_textures	main.c	/^void load_textures()$/;"	f	typeref:typename:void
main	main.c	/^int main()$/;"	f	typeref:typename:int
main_window	window.c	/^SDL_Window *main_window;$/;"	v	typeref:typename:SDL_Window *
money	main.c	/^    int money;$/;"	m	struct:__anon0d38083b0108	typeref:typename:int	file:
p	main.c	/^} p;$/;"	v	typeref:struct:__anon0d38083b0108
renderer	window.c	/^SDL_Renderer *renderer;$/;"	v	typeref:typename:SDL_Renderer *
sel	main.c	/^    int sel;$/;"	m	struct:__anon0d38083b0108	typeref:typename:int	file:
sel_x	main.c	/^    int sel_x;$/;"	m	struct:__anon0d38083b0108	typeref:typename:int	file:
sel_y	main.c	/^    int sel_y;$/;"	m	struct:__anon0d38083b0108	typeref:typename:int	file:
status_code	text.c	/^int status_code;$/;"	v	typeref:typename:int
status_line	text.c	/^char status_line[256];$/;"	v	typeref:typename:char[256]
textures	main.c	/^SDL_Texture * textures[TXT_MAX];$/;"	v	typeref:typename:SDL_Texture * []
textures	main.c	/^enum textures$/;"	g	file:
update_zombie	main.c	/^void update_zombie(struct zombie *z)$/;"	f	typeref:typename:void
update_zombies	main.c	/^void update_zombies()$/;"	f	typeref:typename:void
write_text	text.c	/^void write_text(int x, int y, const char * text, SDL_Color color, int scale_x, int scale_y)$/;"	f	typeref:typename:void
x	main.c	/^    int x;$/;"	m	struct:__anon0d38083b0108	typeref:typename:int	file:
x	main.c	/^    int x;$/;"	m	struct:zombie	typeref:typename:int	file:
y	main.c	/^    int y;$/;"	m	struct:__anon0d38083b0108	typeref:typename:int	file:
y	main.c	/^    int y;$/;"	m	struct:zombie	typeref:typename:int	file:
zombie	main.c	/^struct zombie$/;"	s	file:
zombies	main.c	/^struct zombie*zombies[16];$/;"	v	typeref:struct:zombie * [16]
